{
  "f_type": "InteractionTemplate",
  "f_version": "1.0.0",
  "id": "d43a1c388c5d224d4dbaa97b17807ec2e22efe69f859c19bf87033e97a9f4700",
  "data": {
    "type": "transaction",
    "interface": "",
    "messages": {
      "title": {
        "i18n": {
          "en-US": "Purchase Flowverse Mystery Pass"
        }
      },
      "description": {
        "i18n": {
          "en-US": "Purchase a Flowverse Mystery Pass using the NFTStorefrontV2 Contract as the marketplace"
        }
      }
    },
    "cadence": "import FlowToken from 0xFLOWTOKEN\nimport FungibleToken from 0xFUNGIBLETOKEN\nimport NonFungibleToken from 0xNONFUNGIBLETOKEN\nimport FlowversePass from 0xFLOWVERSEPASS\nimport NFTStorefrontV2 from 0xNFTSTOREFRONTV2\nimport MetadataViews from 0xMETADATAVIEWS\ntransaction(storefrontAddress: Address, listingResourceID: UInt64, commissionRecipient: Address) {\n    let paymentVault: @FungibleToken.Vault\n    let nftCollection: &FlowversePass.Collection{NonFungibleToken.Receiver}\n    let storefront: &NFTStorefrontV2.Storefront{NFTStorefrontV2.StorefrontPublic}\n    let listing: &NFTStorefrontV2.Listing{NFTStorefrontV2.ListingPublic}\n    let commissionRecipientCap: Capability<&{FungibleToken.Receiver}>\n    prepare(acct: AuthAccount) {\n        // Set up Flowverse Pass collection if the account doesn't already have one\n        if acct.borrow<&FlowversePass.Collection>(from: FlowversePass.CollectionStoragePath) == nil {\n            // create a new empty collection and save it to the account\n            acct.save(<- FlowversePass.createEmptyCollection(), to: FlowversePass.CollectionStoragePath)\n            // create a public capability for the collection\n            acct.link<&FlowversePass.Collection{NonFungibleToken.CollectionPublic, NonFungibleToken.Receiver, FlowversePass.CollectionPublic, MetadataViews.ResolverCollection}>(FlowversePass.CollectionPublicPath, target: FlowversePass.CollectionStoragePath)\n        }\n        self.storefront = getAccount(storefrontAddress)\n            .getCapability<&NFTStorefrontV2.Storefront{NFTStorefrontV2.StorefrontPublic}>(\n                NFTStorefrontV2.StorefrontPublicPath\n            )!\n            .borrow()\n            ?? panic(\"Could not borrow Storefront from provided address\")\n        self.listing = self.storefront.borrowListing(listingResourceID: listingResourceID)\n                    ?? panic(\"No Offer with that ID in Storefront\")\n        let price = self.listing.getDetails().salePrice\n        let mainFlowVault = acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Cannot borrow FlowToken vault from acct storage\")\n        self.paymentVault <- mainFlowVault.withdraw(amount: price)\n        self.nftCollection = acct.borrow<&FlowversePass.Collection{NonFungibleToken.Receiver}>(\n            from: FlowversePass.CollectionStoragePath\n        ) ?? panic(\"Cannot borrow NFT collection receiver from account\")\n        self.commissionRecipientCap = getAccount(commissionRecipient).getCapability<&{FungibleToken.Receiver}>(/public/flowTokenReceiver)\n        assert(self.commissionRecipientCap.check(), message: \"Commission Recipient doesn't have flowtoken receiving capability\")\n    }\n    execute {\n        let item <- self.listing.purchase(\n            payment: <-self.paymentVault,\n            commissionRecipient: self.commissionRecipientCap\n        )\n        self.nftCollection.deposit(token: <-item)\n    }\n}",
    "dependencies": {
      "0xFLOWTOKEN": {
        "FlowToken": {
          "mainnet": {
            "address": "0x1654653399040a61",
            "contract": "FlowToken",
            "fq_address": "A.0x1654653399040a61.FlowToken",
            "pin": "0326c320322c4e8dde768ba2975c384184fb7e41765c2c87e79a2040bfc71be8",
            "pin_block_height": 42014063
          }
        }
      },
      "0xFUNGIBLETOKEN": {
        "FungibleToken": {
          "mainnet": {
            "address": "0xf233dcee88fe0abe",
            "contract": "FungibleToken",
            "fq_address": "A.0xf233dcee88fe0abe.FungibleToken",
            "pin": "83c9e3d61d3b5ebf24356a9f17b5b57b12d6d56547abc73e05f820a0ae7d9cf5",
            "pin_block_height": 42014063
          }
        }
      },
      "0xNONFUNGIBLETOKEN": {
        "NonFungibleToken": {
          "mainnet": {
            "address": "0x1d7e57aa55817448",
            "contract": "NonFungibleToken",
            "fq_address": "A.0x1d7e57aa55817448.NonFungibleToken",
            "pin": "83c9e3d61d3b5ebf24356a9f17b5b57b12d6d56547abc73e05f820a0ae7d9cf5",
            "pin_block_height": 42014063
          }
        }
      },
      "0xFLOWVERSEPASS": {
        "FlowversePass": {
          "mainnet": {
            "address": "0x9212a87501a8a6a2",
            "contract": "FlowversePass",
            "fq_address": "A.0x9212a87501a8a6a2.FlowversePass",
            "pin": "9524cc8b5eb8bb8f7d8cf4ee3c65374cafa55921d31d6f72ce08d1c4da8aad57",
            "pin_block_height": 42014063
          }
        }
      },
      "0xNFTSTOREFRONTV2": {
        "NFTStorefrontV2": {
          "mainnet": {
            "address": "0x4eb8a10cb9f87357",
            "contract": "NFTStorefrontV2",
            "fq_address": "A.0x4eb8a10cb9f87357.NFTStorefrontV2",
            "pin": "ba061d95016d5506e9f5d1afda15d82eb066aa8b0552e8b26dc7950fa5714d51",
            "pin_block_height": 42014063
          }
        }
      },
      "0xMETADATAVIEWS": {
        "MetadataViews": {
          "mainnet": {
            "address": "0x1d7e57aa55817448",
            "contract": "MetadataViews",
            "fq_address": "A.0x1d7e57aa55817448.MetadataViews",
            "pin": "ba061d95016d5506e9f5d1afda15d82eb066aa8b0552e8b26dc7950fa5714d51",
            "pin_block_height": 42014063
          }
        }
      }
    },
    "arguments": {
      "storefrontAddress": {
        "index": 0,
        "type": "Address",
        "messages": {
          "description": {
            "i18n": {
              "en-US": "The address of the seller"
            }
          }
        }
      },
      "listingResourceID": {
        "index": 1,
        "type": "UInt64",
        "messages": {
          "description": {
            "i18n": {
              "en-US": "The ID of the listing"
            }
          }
        }
      },
      "commissionRecipient": {
        "index": 2,
        "type": "Address",
        "messages": {
          "description": {
            "i18n": {
              "en-US": "The address of the commissioner"
            }
          }
        }
      }
    }
  }
}